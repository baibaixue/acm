{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green120\blue215;\red0\green128\blue0;\red0\green0\blue0;\red255\green0\blue0;\red128\green0\blue128;\red0\green0\blue255;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title huffman.rtf}}

\deflang1033\pard\plain\f0\fs24 \cf0\i //\'B9\'FE\'B7\'F2\'C2\'FC\'B1\'E0/\'D2\'EB\'C2\'EB\'C6\'F7
\par \i0\cf1 #include<cstdio>
\par #include<cstring>
\par #include<iostream>
\par #include<algorithm>
\par #include<vector>
\par #include<queue>
\par #include<stack>
\par #include<cmath>
\par \cf2\b using\b0  \b namespace\b0  std\cf3\b ;
\par \cf2 struct\b0  node\cf3\b \{
\par \b0\cf2 	\b char\b0  data\cf3\b ;
\par \b0\cf2 	\b int\b0  frequence\cf3\b ;
\par \b0\cf2 	node\cf3\b *\b0\cf2  lchild\cf3\b ;
\par \b0\cf2 	node\cf3\b *\b0\cf2  rchild\cf3\b ;
\par \b0\cf2 	node\cf3\b *\b0\cf2  parents\cf3\b ;
\par \};\b0\cf2  
\par \b struct\b0  Node\cf3\b \{
\par \b0\cf2 	node\cf3\b *\b0\cf2  n\cf3\b ;
\par \b0\cf2 	string p\cf3\b ;
\par \b0\cf2 	\b int\b0  depth\cf3\b ;
\par \};
\par \cf2 bool\b0  cmp\cf3\b (\b0\cf2 node\cf3\b *\b0\cf2  a\cf3\b ,\b0\cf2 node\cf3\b *\b0\cf2  b\cf3\b )\{
\par \b0\cf2 	\b return\b0  a\cf3\b ->\b0\cf2 frequence \cf3\b <\b0\cf2  b\cf3\b ->\b0\cf2 frequence\cf3\b ;
\par \}
\par \cf2 class\b0  Huffman\cf3\b \{
\par \b0\cf2 	\b public\cf3 :
\par \b0\cf2 		Huffman\cf3\b ();
\par \b0\cf2 		\b void\b0  Build\cf3\b ();
\par \b0\cf2 		string Encoding\cf3\b (\cf2 char\b0  data\cf3\b );
\par \b0\cf2 		string Decoding\cf3\b (\b0\cf2 string code\cf3\b );
\par \b0\cf2 		\b void\b0  Print\cf3\b (\b0\cf2 string text\cf3\b );
\par \b0\cf2 		\b void\b0  Tree_Printing\cf3\b ();
\par \b0\cf2 		\b void\b0  Clear\cf3\b ();
\par \b0\cf2 		\cf3\b ~\b0\cf2 Huffman\cf3\b ();
\par \b0\cf2 	\b private\cf3 :
\par \b0\cf2 		node\cf3\b *\b0\cf2  root\cf3\b ;
\par \};
\par \b0\cf2 node\cf3\b *\b0\cf2  Initialization\cf3\b (\cf2 char\b0  data\cf3\b ,\cf2 int\b0  fre\cf3\b ,\b0\cf2 node\cf3\b *\b0\cf2  lchild\cf3\b ,\b0\cf2 node\cf3\b *\b0\cf2  rchild\cf3\b ,\b0\cf2 node\cf3\b *\b0\cf2  parents\cf3\b )\{\b0\cf0\i //\'B3\'F5\'CA\'BC\'BB\'AF\'D2\'BB\'BF\'C3\'CA\'F7 
\par \i0\cf2 	node\cf3\b *\b0\cf2  root\cf3\b =\b0\cf2 root\cf3\b =\cf2 new\b0  node\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 data\cf3\b =\b0\cf2 data\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 frequence\cf3\b =\b0\cf2 fre\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 lchild\cf3\b =\b0\cf2 lchild\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 rchild\cf3\b =\b0\cf2 rchild\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 parents\cf3\b =\b0\cf2 parents\cf3\b ;
\par \b0\cf2 	\b return\b0  root\cf3\b ;
\par \}
\par \b0\cf2 Huffman\cf3\b ::\b0\cf2 Huffman\cf3\b ()\{
\par \b0\cf2 	root\cf3\b =\cf2 new\b0  node\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 parents\cf3\b =\b0\cf2 NULL\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 lchild\cf3\b =\b0\cf2 NULL\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 rchild\cf3\b =\b0\cf2 NULL\cf3\b ;
\par \}\b0\cf2  
\par \b void\b0  Huffman\cf3\b ::\b0\cf2 Build\cf3\b ()\{\b0\cf0\i //\'BD\'A8\'CA\'F7 
\par \i0\cf2 	vector\cf3\b <\b0\cf2 node\cf3\b *>\b0\cf2  list\cf3\b ;
\par \b0\cf2 	list\cf3\b .\b0\cf2 push_back\cf3\b (\b0\cf2 Initialization\cf3\b (\b0\cf2 ' '\cf3\b ,\b0\cf4 186\cf3\b ,\b0\cf2 NULL\cf3\b ,\b0\cf2 NULL\cf3\b ,\b0\cf2 NULL\cf3\b ));
\par \b0\cf2 	\b int\b0  fre\cf3\b [\b0\cf4 26\cf3\b ]=\{\b0\cf4 64\cf3\b ,\b0\cf4 13\cf3\b ,\b0\cf4 22\cf3\b ,\b0\cf4 32\cf3\b ,\b0\cf4 103\cf3\b ,\b0\cf4 21\cf3\b ,\b0\cf4 15\cf3\b ,\b0\cf4 47\cf3\b ,\b0\cf4 57\cf3\b ,\b0\cf4 1\cf3\b ,\b0\cf4 5\cf3\b ,\b0\cf4 32\cf3\b ,\b0\cf4 20\cf3\b ,\b0\cf4 57\cf3\b ,\b0\cf4 63\cf3\b ,\b0\cf4 15\cf3\b ,\b0\cf4 1\cf3\b ,\b0\cf4 48\cf3\b ,\b0\cf4 51\cf3\b ,\b0\cf4 80\cf3\b ,\b0\cf4 23\cf3\b ,\b0\cf4 8\cf3\b ,\b0\cf4 18\cf3\b ,\b0\cf4 1\cf3\b ,\b0\cf4 16\cf3\b ,\b0\cf4 1\cf3\b \};
\par \b0\cf2 	\b for\cf3 (\cf2 int\b0  i\cf3\b =\b0\cf4 0\cf3\b ;\b0\cf2 i\cf3\b <\b0\cf4 26\cf3\b ;\b0\cf2 i\cf3\b ++)\{
\par \b0\cf2 		list\cf3\b .\b0\cf2 push_back\cf3\b (\b0\cf2 Initialization\cf3\b (\b0\cf2 'A'\cf3\b +\b0\cf2 i\cf3\b ,\b0\cf2 fre\cf3\b [\b0\cf2 i\cf3\b ],\b0\cf2 NULL\cf3\b ,\b0\cf2 NULL\cf3\b ,\b0\cf2 NULL\cf3\b ));
\par \b0\cf2 	\cf3\b \}
\par \b0\cf2 	sort\cf3\b (\b0\cf2 list\cf3\b .\b0\cf2 begin\cf3\b (),\b0\cf2 list\cf3\b .\b0\cf2 end\cf3\b (),\b0\cf2 cmp\cf3\b );
\par \b0\cf2 	
\par 	\b while\cf3 (\b0\cf2 list\cf3\b .\b0\cf2 size\cf3\b ()!=\b0\cf4 1\cf3\b )\{
\par \b0\cf2 		node\cf3\b *\b0\cf2  temp\cf3\b =\b0\cf2 Initialization\cf3\b (\b0\cf2 '*'\cf3\b ,\b0\cf2 list\cf3\b [\b0\cf4 0\cf3\b ]->\b0\cf2 frequence\cf3\b +\b0\cf2 list\cf3\b [\b0\cf4 1\cf3\b ]->\b0\cf2 frequence\cf3\b ,\b0\cf2 list\cf3\b [\b0\cf4 0\cf3\b ],\b0\cf2 list\cf3\b [\b0\cf4 1\cf3\b ],\b0\cf2 NULL\cf3\b );
\par \b0\cf2 		list\cf3\b .\b0\cf2 push_back\cf3\b (\b0\cf2 temp\cf3\b );
\par \b0\cf2 		list\cf3\b [\b0\cf4 0\cf3\b ]->\b0\cf2 parents\cf3\b =\b0\cf2 temp\cf3\b ;
\par \b0\cf2 		list\cf3\b [\b0\cf4 1\cf3\b ]->\b0\cf2 parents\cf3\b =\b0\cf2 temp\cf3\b ;
\par \b0\cf2 		list\cf3\b .\b0\cf2 erase\cf3\b (\b0\cf2 list\cf3\b .\b0\cf2 begin\cf3\b (),\b0\cf2 list\cf3\b .\b0\cf2 begin\cf3\b ()+\b0\cf4 2\cf3\b );
\par \b0\cf2 		sort\cf3\b (\b0\cf2 list\cf3\b .\b0\cf2 begin\cf3\b (),\b0\cf2 list\cf3\b .\b0\cf2 end\cf3\b (),\b0\cf2 cmp\cf3\b );
\par \b0\cf2 	\cf3\b \}
\par \b0\cf2 	root\cf3\b =\b0\cf2 list\cf3\b [\b0\cf4 0\cf3\b ];
\par \}
\par \cf2 void\b0  Huffman\cf3\b ::\b0\cf2 Tree_Printing\cf3\b ()\{\b0\cf0\i //\'CA\'E4\'B3\'F6\'B9\'FE\'B7\'F2\'C2\'FC\'CA\'F7\'B5\'C4\'B0\'BC\'C8\'EB\'B1\'ED 
\par \i0\cf2 	stack\cf3\b <\b0\cf2 Node\cf3\b >\b0\cf2  S\cf3\b ;
\par \b0\cf2 	Node temp\cf3\b ;
\par \b0\cf2 	temp\cf3\b .\b0\cf2 n\cf3\b =\b0\cf2 root\cf3\b ;
\par \b0\cf2 	temp\cf3\b .\b0\cf2 depth\cf3\b =\b0\cf4 0\cf3\b ;
\par \b0\cf2 	temp\cf3\b .\b0\cf2 p\cf3\b =\b0\cf2 'r'\cf3\b ;
\par \b0\cf2 	S\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 temp\cf3\b );
\par \b0\cf2 	
\par 	\b while\cf3 (!\b0\cf2 S\cf3\b .\b0\cf2 empty\cf3\b ())\{
\par \b0\cf2 		Node Root\cf3\b ;
\par \b0\cf2 		Node Lchild\cf3\b ;
\par \b0\cf2 		Node Rchild\cf3\b ;
\par \b0\cf2 		Root\cf3\b =\b0\cf2 S\cf3\b .\b0\cf2 top\cf3\b ();
\par \b0\cf2 		S\cf3\b .\b0\cf2 pop\cf3\b ();
\par \b0\cf2 		\b if\cf3 (\b0\cf2 Root\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 lchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			Lchild\cf3\b .\b0\cf2 n\cf3\b =\b0\cf2 Root\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 lchild\cf3\b ;
\par \b0\cf2 			Lchild\cf3\b .\b0\cf2 depth\cf3\b =\b0\cf2 Root\cf3\b .\b0\cf2 depth\cf3\b +\b0\cf4 1\cf3\b ;
\par \b0\cf2 			Lchild\cf3\b .\b0\cf2 p\cf3\b =\b0\cf2 '0'\cf3\b ;
\par \b0\cf2 			S\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 Lchild\cf3\b );
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		\b if\cf3 (\b0\cf2 Root\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 rchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			Rchild\cf3\b .\b0\cf2 n\cf3\b =\b0\cf2 Root\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 rchild\cf3\b ;
\par \b0\cf2 			Rchild\cf3\b .\b0\cf2 depth\cf3\b =\b0\cf2 Root\cf3\b .\b0\cf2 depth\cf3\b +\b0\cf4 1\cf3\b ;
\par \b0\cf2 			Rchild\cf3\b .\b0\cf2 p\cf3\b =\b0\cf2 '1'\cf3\b ;
\par \b0\cf2 			S\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 Rchild\cf3\b );
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		\b for\cf3 (\cf2 int\b0  i\cf3\b =\b0\cf4 0\cf3\b ;\b0\cf2 i\cf3\b <\b0\cf2 Root\cf3\b .\b0\cf2 depth\cf3\b ;\b0\cf2 i\cf3\b ++)\{
\par \b0\cf2 			printf\cf3\b (\cf5 "	|"\cf3 );
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		cout\cf3\b <<\b0\cf2 Root\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 data\cf3\b <<\cf5 ":"\cf3 <<\b0\cf2 Root\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 frequence\cf3\b <<\cf5 "("\cf3 <<\b0\cf2 Root\cf3\b .\b0\cf2 p\cf3\b <<\cf5 ")"\cf3 ;
\par \b0\cf2 		printf\cf3\b (\cf5 "\\n"\cf3 )\b0\cf2  \cf3\b ;
\par \b0\cf2 	\cf3\b \}\b0\cf2 	
\par 	\cf0\i /*
\par 	queue<node*> Q;
\par 	node* null_node=new node;
\par 	null_node->data='\\\\';
\par 	null_node->lchild=NULL;
\par 	null_node->rchild=NULL;
\par 	Q.push(root);
\par 	node* temp;
\par 	int leafe_node=0;
\par 	for(int count = 0; ;count++)\{
\par 		
\par 		if(leafe_node==27)\{
\par 			break;
\par 		\}
\par 		for(int i=0;i<pow(2,count);i++)\{
\par 			temp=Q.front();
\par 			if(temp->lchild==NULL)\{
\par 				Q.push(null_node);
\par 			\}else\{
\par 				Q.push(temp->lchild);
\par 			\}
\par 			if(temp->rchild==NULL)\{
\par 				Q.push(null_node);
\par 			\}else\{
\par 				Q.push(temp->rchild);
\par 			\}
\par 			if(temp->data!='*'&&temp->data!='\\\\')\{
\par 				printf("'%c' ",temp->data);leafe_node++;
\par 			\}
\par 			else if(temp->data=='*')\{
\par 				printf("*");
\par 			\}else\{
\par 				printf(" ");
\par 			\}
\par 			Q.pop();
\par 		\}
\par 		printf("\\n");
\par 	\}
\par 	*/
\par \i0\cf3\b \}
\par \b0\cf2 string Huffman\cf3\b ::\b0\cf2 Encoding\cf3\b (\cf2 char\b0  data\cf3\b )\{\b0\cf0\i //\'B1\'E0\'C2\'EB\'B5\'A5\'B8\'F6\'D7\'D6\'B7\'FB 
\par \i0\cf2 	string code\cf3\b ;
\par \b0\cf2 	stack\cf3\b <\b0\cf2 Node\cf3\b >\b0\cf2  S\cf3\b ;
\par \b0\cf2 	Node now\cf3\b ;
\par \b0\cf2 	now\cf3\b .\b0\cf2 n\cf3\b =\b0\cf2 root\cf3\b ;
\par \b0\cf2 	now\cf3\b .\b0\cf2 p\cf3\b =\cf5 ""\cf3 ;
\par \b0\cf2 	S\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 now\cf3\b );
\par \b0\cf2 	\b while\cf3 (!\b0\cf2 S\cf3\b .\b0\cf2 empty\cf3\b ())\{
\par \b0\cf2 		now\cf3\b =\b0\cf2 S\cf3\b .\b0\cf2 top\cf3\b ();
\par \b0\cf2 		\b if\cf3 (\b0\cf2 now\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 data\cf3\b ==\b0\cf2 data\cf3\b )\{
\par \b0\cf2 			code\cf3\b =\b0\cf2 now\cf3\b .\b0\cf2 p\cf3\b ;
\par \b0\cf2 			\b break\cf3 ;
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		S\cf3\b .\b0\cf2 pop\cf3\b ();
\par \b0\cf2 		Node next\cf3\b ;
\par \b0\cf2 		\b if\cf3 (\b0\cf2 now\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 lchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			next\cf3\b .\b0\cf2 n\cf3\b =\b0\cf2 now\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 lchild\cf3\b ;
\par \b0\cf2 			next\cf3\b .\b0\cf2 p\cf3\b =\b0\cf2 now\cf3\b .\b0\cf2 p\cf3\b +\b0\cf2 '0'\cf3\b ;
\par \b0\cf2 			S\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 next\cf3\b );
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		\b if\cf3 (\b0\cf2 now\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 rchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			next\cf3\b .\b0\cf2 n\cf3\b =\b0\cf2 now\cf3\b .\b0\cf2 n\cf3\b ->\b0\cf2 rchild\cf3\b ;
\par \b0\cf2 			next\cf3\b .\b0\cf2 p\cf3\b =\b0\cf2 now\cf3\b .\b0\cf2 p\cf3\b +\b0\cf2 '1'\cf3\b ;
\par \b0\cf2 			S\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 next\cf3\b );\b0\cf2  
\par 		\cf3\b \}
\par \b0\cf2 	\cf3\b \}
\par \b0\cf2 	\b return\b0  code\cf3\b ;\b0\cf2 	
\par \cf3\b \}
\par \cf2 void\b0  Huffman\cf3\b ::\b0\cf2 Print\cf3\b (\b0\cf2 string text\cf3\b )\{\b0\cf0\i //\'B1\'E0\'C2\'EB\'CE\'C4\'B1\'BE\'B2\'A2\'CA\'E4\'B3\'F6 
\par \i0\cf2 	\b for\cf3 (\cf2 int\b0  i\cf3\b =\b0\cf4 0\cf3\b ;\b0\cf2 i\cf3\b <\b0\cf2 text\cf3\b .\b0\cf2 length\cf3\b ();\b0\cf2 i\cf3\b ++)\{
\par \b0\cf2 		cout\cf3\b <<\b0\cf2 Encoding\cf3\b (\cf2 char\cf3 (\b0\cf2 text\cf3\b [\b0\cf2 i\cf3\b ]));
\par \b0\cf2 	\cf3\b \}
\par \b0\cf2 	cout\cf3\b <<\b0\cf2 endl\cf3\b ;
\par \}
\par \b0\cf2 string Huffman\cf3\b ::\b0\cf2 Decoding\cf3\b (\b0\cf2 string code\cf3\b )\{\b0\cf0\i //\'D2\'EB\'C2\'EB 
\par \i0\cf2 	node\cf3\b *\b0\cf2  temp\cf3\b =\b0\cf2 root\cf3\b ;
\par \b0\cf2 	string text\cf3\b ;
\par \b0\cf2 	\b for\cf3 (\cf2 int\b0  i\cf3\b =\b0\cf4 0\cf3\b ;\b0\cf2 i\cf3\b <\b0\cf2 code\cf3\b .\b0\cf2 length\cf3\b ();\b0\cf2 i\cf3\b ++)\{
\par \b0\cf2 		\b char\b0  c\cf3\b =\b0\cf2 code\cf3\b [\b0\cf2 i\cf3\b ];
\par \b0\cf2 		\b if\cf3 (\b0\cf2 temp\cf3\b ->\b0\cf2 lchild\cf3\b !=\b0\cf2 NULL\cf3\b &&\b0\cf2 temp\cf3\b ->\b0\cf2 rchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			\b if\cf3 (\b0\cf2 c\cf3\b ==\b0\cf2 '1'\cf3\b )\{
\par \b0\cf2 				temp\cf3\b =\b0\cf2 temp\cf3\b ->\b0\cf2 rchild\cf3\b ;
\par \b0\cf2 			\cf3\b \}\cf2 else\b0  \b if\cf3 (\b0\cf2 c\cf3\b ==\b0\cf2 '0'\cf3\b )\{
\par \b0\cf2 				temp\cf3\b =\b0\cf2 temp\cf3\b ->\b0\cf2 lchild\cf3\b ;
\par \b0\cf2 			\cf3\b \}
\par \b0\cf2 			\b if\cf3 (\b0\cf2 temp\cf3\b ->\b0\cf2 lchild\cf3\b ==\b0\cf2 NULL\cf3\b ||\b0\cf2 temp\cf3\b ->\b0\cf2 rchild\cf3\b ==\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 				text\cf3\b +=\b0\cf2 temp\cf3\b ->\b0\cf2 data\cf3\b ;
\par \b0\cf2 				temp\cf3\b =\b0\cf2 root\cf3\b ;
\par \b0\cf2 			\cf3\b \}
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 	\cf3\b \}
\par \b0\cf2 	\b return\b0  text\cf3\b ;
\par \}\b0\cf2  
\par \b void\b0  Huffman\cf3\b ::\b0\cf2 Clear\cf3\b ()\{\b0\cf0\i //\'C7\'E5\'BF\'D5\'B9\'FE\'B7\'F2\'C2\'FC\'CA\'F7 
\par \i0\cf2 	
\par 	queue\cf3\b <\b0\cf2 node\cf3\b *>\b0\cf2  Q\cf3\b ;
\par \b0\cf2 	\b if\cf3 (\b0\cf2 root\cf3\b ->\b0\cf2 rchild \cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 		Q\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 root\cf3\b ->\b0\cf2 rchild\cf3\b );
\par \b0\cf2 	\cf3\b \}\b0\cf2  
\par 	\b if\cf3 (\b0\cf2 root\cf3\b ->\b0\cf2 lchild \cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 		Q\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 root\cf3\b ->\b0\cf2 lchild\cf3\b );
\par \b0\cf2 	\cf3\b \}
\par \b0\cf2 	root\cf3\b ->\b0\cf2 lchild\cf3\b =\b0\cf2 NULL\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 rchild\cf3\b =\b0\cf2 NULL\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 parents\cf3\b =\b0\cf2 NULL\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 data\cf3\b =\b0\cf2 '*'\cf3\b ;
\par \b0\cf2 	root\cf3\b ->\b0\cf2 frequence\cf3\b =\b0\cf4 0\cf3\b ;
\par \b0\cf2 	\b while\cf3 (!\b0\cf2 Q\cf3\b .\b0\cf2 empty\cf3\b ())\{
\par \b0\cf2 		\b if\cf3 (\b0\cf2 Q\cf3\b .\b0\cf2 front\cf3\b ()->\b0\cf2 lchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			Q\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 Q\cf3\b .\b0\cf2 front\cf3\b ()->\b0\cf2 lchild\cf3\b );
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		\b if\cf3 (\b0\cf2 Q\cf3\b .\b0\cf2 front\cf3\b ()->\b0\cf2 rchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			Q\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 Q\cf3\b .\b0\cf2 front\cf3\b ()->\b0\cf2 rchild\cf3\b );
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		\b delete\b0  Q\cf3\b .\b0\cf2 front\cf3\b ();
\par \b0\cf2 		Q\cf3\b .\b0\cf2 pop\cf3\b ();
\par \b0\cf2 	\cf3\b \}
\par 
\par \}
\par \b0\cf2 Huffman\cf3\b ::~\b0\cf2 Huffman\cf3\b ()\{
\par \b0\cf2 	queue\cf3\b <\b0\cf2 node\cf3\b *>\b0\cf2  Q\cf3\b ;
\par \b0\cf2 	Q\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 root\cf3\b );
\par \b0\cf2 	\b while\cf3 (!\b0\cf2 Q\cf3\b .\b0\cf2 empty\cf3\b ())\{
\par \b0\cf2 		\b if\cf3 (\b0\cf2 Q\cf3\b .\b0\cf2 front\cf3\b ()->\b0\cf2 lchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			Q\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 Q\cf3\b .\b0\cf2 front\cf3\b ()->\b0\cf2 lchild\cf3\b );
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		\b if\cf3 (\b0\cf2 Q\cf3\b .\b0\cf2 front\cf3\b ()->\b0\cf2 rchild\cf3\b !=\b0\cf2 NULL\cf3\b )\{
\par \b0\cf2 			Q\cf3\b .\b0\cf2 push\cf3\b (\b0\cf2 Q\cf3\b .\b0\cf2 front\cf3\b ()->\b0\cf2 rchild\cf3\b );
\par \b0\cf2 		\cf3\b \}
\par \b0\cf2 		\b delete\b0  Q\cf3\b .\b0\cf2 front\cf3\b ();
\par \b0\cf2 		Q\cf3\b .\b0\cf2 pop\cf3\b ();
\par \b0\cf2 	\cf3\b \}
\par \}\b0\cf2  
\par \b int\b0  main\cf3\b ()\{
\par \b0\cf2 	Huffman tree\cf3\b ;
\par \b0\cf2 	tree\cf3\b .\b0\cf2 Build\cf3\b ();
\par \b0\cf2 	cout\cf3\b <<\cf5 "\'B9\'FE\'B7\'F2\'C2\'FC\'CA\'F7\'B0\'BC\'C8\'EB\'B1\'ED\'A3\'BA"\cf3 <<\b0\cf2 endl\cf3\b ;\b0\cf2  
\par 	tree\cf3\b .\b0\cf2 Tree_Printing\cf3\b ();
\par \b0\cf2 	cout\cf3\b <<\cf5 "\'B8\'F7\'B8\'F6\'D7\'D6\'B7\'FB\'B5\'C4\'B9\'FE\'B7\'F2\'C2\'FC\'B1\'E0\'C2\'EB\'A3\'BA"\cf3 <<\b0\cf2 endl\cf3\b ;\b0\cf2  
\par 	\b char\b0  a\cf3\b =\b0\cf2 'A'\cf3\b ;
\par \b0\cf2 	\b for\cf3 (\cf2 int\b0  i\cf3\b =\b0\cf4 0\cf3\b ;\b0\cf2 i\cf3\b <\b0\cf4 26\cf3\b ;\b0\cf2 i\cf3\b ++)\{
\par \b0\cf2 		cout\cf3\b <<(\cf2 char\cf3 )(\b0\cf2 a\cf3\b +\b0\cf2 i\cf3\b )<<\cf5 ":"\cf3 <<\b0\cf2 tree\cf3\b .\b0\cf2 Encoding\cf3\b (\b0\cf2 a\cf3\b +\b0\cf2 i\cf3\b )<<\b0\cf2 endl\cf3\b ;
\par \b0\cf2 	\cf3\b \}
\par \b0\cf2 	cout\cf3\b <<\cf5 " :"\cf3 <<\b0\cf2 tree\cf3\b .\b0\cf2 Encoding\cf3\b (\b0\cf2 ' '\cf3\b )<<\b0\cf2 endl\cf3\b ;
\par \b0\cf2 	cout\cf3\b <<\cf5 "\'B1\'E0\'D2\'EB\'CE\'C4\'B1\'BE\'A3\'BA"\cf3 <<\b0\cf2 endl\cf3\b ;\b0\cf2  
\par 	string text\cf3\b =\cf5 "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"\cf3 ;
\par \b0\cf2 	cout\cf3\b <<\cf5 "'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG':"\cf3 <<\b0\cf2 endl\cf3\b ;\b0\cf2  
\par 	tree\cf3\b .\b0\cf2 Print\cf3\b (\b0\cf2 text\cf3\b );
\par \b0\cf2 	cout\cf3\b <<\cf5 "\'BD\'E2\'D2\'EB\'B1\'E0\'C2\'EB\'A3\'BA"\cf3 <<\b0\cf2 endl\cf3\b ;\b0\cf2  
\par 	string code\cf3\b ;
\par \b0\cf2 	cin\cf3\b >>\b0\cf2 code\cf3\b ;
\par \b0\cf2 	cout\cf3\b <<\b0\cf2 tree\cf3\b .\b0\cf2 Decoding\cf3\b (\b0\cf2 code\cf3\b )<<\b0\cf2 endl\cf3\b ;
\par \b0\cf2 	
\par \cf3\b \}
\par }